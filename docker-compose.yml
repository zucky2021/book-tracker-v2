services:
  frontend:
    build:
      context: ./frontend # フロントエンドプロジェクトのディレクトリ
      dockerfile: Dockerfile # 使用するDockerfile
      target: local # ビルドステージを指定
    networks:
      - app-networks # ネットワークを指定
    volumes:
      - ./frontend:/app # フロントエンドのソースコードの変更をコンテナにバインドマウント
      - /app/node_modules # node_modulesを永続化するためのボリューム
    environment: # Dockerコンテナ内で利用可能な環境変数を設定する
      - NODE_ENV=development # 開発環境として設定
      - FAST_REFRESH=true # Viteの高速リフレッシュ機能を有効化
      - CHOKIDAR_USEPOLLING=true # ファイル変更検知を有効化
      - CHOKIDAR_INTERVAL=1000 # ファイル変更検知の間隔ms
    env_file:
      - .env # 参照するenvファイルを指定
    command: npm run dev # アプリケーションの実行コマンドを指定する
    ports:
      - "3000:3000" # [ホストのポート番号]：[コンテナのポート番号]
    depends_on:
      - backend # backendサービスが起動した後にこのサービスを起動する
    restart: always # コンテナが停止した場合に自動的に再起動
    stdin_open: true # 標準入力を開いておく
    tty: true # 端末を有効化

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: local # ビルドステージを指定
    networks:
      - app-networks
    volumes:
      - ./backend:/app
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      - db
    restart: always

  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    container_name: book-tracker-db
    networks:
      - app-networks
    volumes: # コンテナの外部に保管する
      - mysql-data:/var/lib/mysql # データベースデータを永続化するボリューム
      - ./mysql/init:/docker-entrypoint-initdb.d # 初期化スクリプトをマウント
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-Root12345}
      MYSQL_DATABASE: ${DB_NAME:-book-tracker}
    env_file:
      - .env
    ports:
      - "3306:3306"
    restart: always # コンテナが停止した場合に自動的に再起動
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  lint:
    image: golangci/golangci-lint:latest
    container_name: golangci-lint
    working_dir: /backend
    volumes:
      - ./backend:/backend
      - ./.golangci.yml:/root/.golangci.yml
    command: ["golangci-lint", "run", "./..."]

  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - "4566:4566" # LocalStackのAPIエンドポイント
      - "4510-4559:4510-4559" # LocalStackのサービスエンドポイント
    networks:
      - app-networks
    environment:
      SERVICES: "s3"
      AWS_DEFAULT_REGION: ${AWS_REGION:-ap-northeast-1}
      PERSISTENCE: 1
    env_file:
      - .env
    restart: unless-stopped # コンテナが停止した場合に自動的に再起動
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - localstack-data:/var/lib/localstack # LocalStackのデータを永続化するボリューム
      - /var/run/docker.sock:/var/run/docker.sock # Dockerソケットをマウント
      - ./localstack/init-s3.sh:/etc/localstack/init/ready.d/init-s3.sh # S3の初期化スクリプトをマウント
      - ./localstack/init-data:/init-data # 初期データを格納するディレクトリ

  markdownlint:
    image: node:24-alpine
    container_name: markdownlint
    working_dir: /work
    volumes:
      - .:/work
    entrypoint: ["npx", "markdownlint-cli2"]

# ボリュームの定義
volumes:
  mysql-data: # db の volume の名前を定義
  localstack-data: # localstack の volume の名前を定義

networks:
  app-networks: # ネットワークの名前を指定
    driver: bridge # ドライバーを指定
